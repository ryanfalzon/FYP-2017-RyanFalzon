using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Bio;
using Bio.Algorithms.Alignment.MultipleSequenceAlignment;
using System.IO;
using Neo4j.Driver.V1;
using System.Runtime.Serialization.Json;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using Bio.IO;
using Bio.IO.ClustalW;
using Bio.IO.FastA;
using Bio.SimilarityMatrices;
using Bio.Algorithms.Assembly.Comparative;
using Bio.Util;

namespace RegionExtractor
{
    class Menu
    {
        // Private properties
        private string choice;
        DatabaseConnection db;
        RegionAnalyzer ra;
        List<DataRow> data;

        // Constructor
        public Menu()
        {
            this.choice = "";
        }

        // Method to output the menuma
        public void Show()
        {
            Console.WriteLine("\nMAIN MENU");
            Console.WriteLine("---------\n");
            Console.WriteLine("1) Generate Regions");
            Console.WriteLine("2) Classify Protein Sequence");
            Console.WriteLine("3) Reset Graph Database");
            Console.Write("\nEnter Choice or X to Exit: ");
            choice = Console.ReadLine();
            CheckInput(choice);
        }

        // Method to determine user input in menu
        public void CheckInput(string choice)
        {

            // Choice
            switch (choice)
            {
                case "1":
                    {
                        // Initialize a database connection
                        db = new DatabaseConnection();

                        // Check if connection was successful
                        if (db.Connect(true))
                        {
                            data = db.GetData();
                            if (db.Connect(false))
                            {
                                ra = new RegionAnalyzer(data);
                                ra.Analyze();
                                data.Clear();
                            }
                        }
                        break;
                    }

                case "2":
                    {
                        Console.Write("\nEnter file name where new sequences are stored: ");
                        string file = Console.ReadLine();
                        Console.Write("Enter Threshold For Shortlisting Functional Families: ");
                        string thresholdShortlist = Console.ReadLine();
                        Console.Write("Enter Threshold For K-Mer Comparison Results: ");
                        string thresholdKmerResults = Console.ReadLine();

                        // Get individual sequences from the text file contents
                        string textfile = System.IO.File.ReadAllText(file);
                        textfile = textfile.Replace(System.Environment.NewLine, "");
                        List<string> newSequences = textfile.Split(';').ToList();
                        newSequences = newSequences.Where(element => !string.IsNullOrEmpty(element)).ToList();

                        // Classsify new sequences
                        List<ComparisonResult> results = new List<ComparisonResult>();
                        Classifier classifier = new Classifier();
                        foreach (string newSequence in newSequences)
                        {
                            results.Add(classifier.Classify(newSequence, Convert.ToInt32(thresholdShortlist), Convert.ToInt32(thresholdKmerResults)));
                        }

                        // Ask the user if he wishes to save the results in a text file
                        Console.Write("\nWould You Like To Save Your Results? Y/N: ");
                        string store = Console.ReadLine();
                        if (store.Equals("Y"))
                        {
                            Console.Write("Enter A Name For The Destination File: ");
                            string resultsFile = Console.ReadLine();
                            StringBuilder sb = new StringBuilder();
                            foreach (ComparisonResult result in results)
                            {
                                sb.AppendLine(result.ToString());
                            }

                            // Check if file already exists
                            if (System.IO.File.Exists(resultsFile))
                            {
                                // Delete the file
                                Console.WriteLine("File Already Exists. Removing Current Contents...");
                                System.IO.File.Delete(resultsFile);
                            }
                            System.IO.File.WriteAllText(resultsFile, sb.ToString());
                        }

                        Console.Write("Process Completed. Press Any Key To Continue...");
                        Console.ReadLine();
                        break;
                    }

                case "3":
                    {
                        GraphDatabaseConnection gdc = new GraphDatabaseConnection();
                        gdc.Connect();
                        gdc.Reset();
                        break;
                    }

                case "4":
                    {
                        EbiWS.MViewClient client = new EbiWS.MViewClient();
                        EbiWS.MViewWs.InputParameters inputParameters = new EbiWS.MViewWs.InputParameters();
                        client.Email = "rfalzonryan@gmail.com";
                        client.JobTitle = "hello";
                        inputParameters.sequence = System.IO.File.ReadAllText("clustalo-S20180407-204545-0295-7378638-p1m.aln-clustal_num.clustal_num");
                        inputParameters.outputformat = "pearson";
                        inputParameters.consensus = true;
                        inputParameters.consensusSpecified = true;
                        client.InParams = inputParameters;
                        client.SubmitJob();
                        break;

                    }

                case "5":
                    {
                        Bio.IO.ClustalW.ClustalWParser parser = new Bio.IO.ClustalW.ClustalWParser
                        {
                            Alphabet = Alphabets.Protein
                        };
                        Bio.Algorithms.Alignment.ISequenceAlignment result = parser.ParseOne(File.OpenRead("clustalo-S20180408-101819-0090-2229482-p2m.aln"));
                        break;
                    }
                case "6":
                    {
                        FastAParser parser = new FastAParser { Alphabet = Alphabets.Protein };
                        IEnumerable<ISequence> results = parser.Parse("clustalo-S20180408-120541-0622-32972959-p1m.fasta");
                        SimpleConsensusResolver con = new SimpleConsensusResolver(75);
                        foreach (ISequence seq in results)
                        {
                            string actual = seq.Aggregate("", (current, b) => current + (char)b);
                            Console.WriteLine(actual);
                            
                        }
                        break;
                    }
                case "7":
                    {
                        IList<Bio.Algorithms.Alignment.ISequenceAlignment> actualOutput = null;
                        ISequenceAlignmentParser parser = new ClustalWParser
                        {
                            Alphabet = Alphabets.Protein
                        };

                        using (parser.Open("clustalo-I20180408-121309-0615-76696051-p1m.clustal"))
                        {
                            actualOutput = parser.Parse().ToList();
                        }

                        foreach (Bio.Algorithms.Alignment.ISequenceAlignment alignment in actualOutput)
                        {

                            foreach (Sequence actualSequence in alignment.AlignedSequences[0].Sequences)
                            {
                                Console.WriteLine(actualSequence);
                            }
                        }

                        break;
                    }
                case "8":
                    {
                        SimilarityMatrix similarityMatrix = new SimilarityMatrix(SimilarityMatrix.StandardSimilarityMatrix.Blosum50);
                        int gapOpenPenalty = -4;
                        int gapExtendPenalty = -1;
                        int kmerLength = 3;

                        ISequence seqA = new Sequence(Alphabets.Protein, "MTDAFELPSTLAQALQRRAVLAPDQVALRFLAEEQDQSVVLSYLDLDLRARTIAAALQANAEFGDRAVLLFPSGPDYVAAFFGCLYAGVIAVPAYPPESTRRHHQERLISIMADAEPRLLLTSAGLRDSLLQMDELKAPGAPQLLCVDTLQAGLAEDWQAVALQGDDIAFLQYTSGSTALPKGVQVSHGNLVANELLIRRGFGIDLNPDDVIVSWLPLYHDMGLIGGLLQPIFSGVPCVLMSPAYFLARPVRWLEAISEYGGTISGGPDFAYRLCSERVSESALERLDLSGWRVAYSGSEPIRLDTLERFAEKFSACGFSHENFLASYGLAEATLFVAGGVRGQGIPALHLDDQALAQNRAEPGQGSAMMSCGFSQPEHAVLVMDPQQLGELPDNRIGEVWAAGPSIAHGYWRNPEATAKTFVQHAGRTWLRTGDLGFIRDGELFITGRLKDLLIVRGHNLYPQDIEKTIEREVEVVRKGRVAAFAVTEQGQEGIGIAAEISRSVQKILPPEALIKAIRQAVAEACQEAPSVVVLLNPGALPKTSSGKLQRSACRTRLADGSLDYYALFPQAGSEPARVGEGSGDELQNLIGRIWQEQLQCASVAADDHFFLLGGNSIAATQVIARLREELGLELGLRLLFEAPTLGAFSAAVARQQQDGGVAQGSINALSRQQPLPQSLAQNRLWITWQLDPQSSAYNIPGGLRLRGELDEEALRASFQQLIQRHEALRTRFFERDGQALQQVDAAGEFNLQVIDISDLPPAEREARARQIREDEARTQFDLEKGPLYWATLVRLDDEEHQLLLTLHHIIADGWSLNVLIDEFSRLYAAAAQGQSLELAPLALQYADYGSWQRQWLAQGEGQRQLDYWKQQLADEAPVLNLATDHPRSAQVRHSAARHDLRLSASLSEAVRQTAQARQATPFMLLLAAFQTLLHRYSGQGDIRIGVPNANRPRLETQGLLGFFINTQVLRGQLDSRQSFADLLQQTRRTALEAQAHQDLPFEQLLEAFPEAREQGLFQVMFNHQQRDLSALRRLPGLLAEELPWHSREAKFDLQLHSEEDRNGRLSLAFDYADELFDAASIERLAGHFISLLEHACLQPDCALGDLPLLGNAEAAQLQQWSVAPCAPAEQWLPERLHEQLRQSPERTALVWDGGQLGFAELHAQANRLAHYLRDKGVGPDVCVAIAAERSPQLLIGLLAIIKAGGAYVPLDPDYPAERLAYMLGDSGVQLLLTQTHLLGRMPEAPGVSAIAMDSLKLDSWPSHAPGLHLHGEHLAYVIYTSGSTGQPKGVGNTHRALMERLQWMQDSYQLQADDVLMQKAPISFDVSVWECFWPLITGCRLLIAAPGEHRDPHRIAQLVQEYGVTTLHFVPPLLQLFVDEPLSAECHSLRRVFSGGEALPAELRNRLLQQLPNAQLHNRYGPTETAINVTHWQCSVDDGERSPIGRPLGNVLCRVLDAELNLMPAGVPGELCISGQGLARGYLGRPALTAERFVVDPLSEEGARLYRTGDRVRWCADGVLEYLGRLDQQVKLRGFRVEPQEIEARLLAQDGVAQAAVLVRDTVAGPQLIGYYTAQASDEDETEQSARLKTALAAELPEYMVPAQLLRLDAMPLSPSGKLDRRALPEPQWLVREHVEPSTELEQQIAAIWREVLGQPRIGLKDDFFALGGHSLLATQIISRTRQACDVELPLRALFEASELGAFAEQVLLIQQSGARNQQPPIARVDRSQPVPLSYSQQRMWFLWQMEPDSPAYNVGGMARLSGVLDVGRFEAALQALILRHETLRTTFPSVNGVAHQQVHADTGLRMAWKDFSALAPDARQQRLQQLADSEAHQPFDLETGPLLRACLVKAGEQEHYFVLTLHHIVTEGWAMDIFARELGALYEAFLDDRESPLEPLPVQYLDYSVWQRQWLESGERQRQLDYWTGQLGREHPLLELPSDRPRPAVQSHQGELYRFDLSDELAARVRAFNAEHGLTLFMTMTAALSLLLYRYSGQSDLRIGAPVANRIRPESEGLIGAFLNTQVLRCQLDGQMSVSQLLEQVRHTVIEGQSHQDLPFDHLVEALQPPRSTAYNPLFQVMCNVQRWEFQQSRQLAGMTVEYLVNDARATKFDLNLEVTDLDQRLGCCLTYSTDLFDEPRIARMAAHWRNLLEALLSDPQQRLCELPLLHAEEQQQLLDSLSVEPGEQRLDQCIHHLFSEQALARKDAPALTFAGQTLSYSELDSRANRLAWMLRERGVGPQVRVGLALERSLEMVVGLLAILKAGGAYVPLDPEYPLDRLHYMIEDSGIGLLLSDARMFAALGELPISVGRWCLEEDGALLADYPAGELPFISLPQHQAYLIYTSGSTGQPKGVVVSHGEIAMHCQAVIRRFGMRADDCELHFYSINFDAATERLLVPLLSGAQVVLRAQGQWDAEEICQLIRQHRISILGFTPSYGSQLAQHLATQQQTLPVRMCITGGEALTGEHLQRIRAAFQPSLFFNAYGPTETVVMPLASLAPEQLADGVASVPIGRIVGARVAYILDADLALVPQGATGELYVGGAGLAQGYHRRPGMSAERFVADPFATDGGRLYRTGDLVRQCADGQVEYIGRVDHQVKIRGFRIELGEIETRLLDHPAVREAVVLALDTPAGKQLAGYLVTEVAEHNDVQQANLREALKQQLKTQLPDYMVPTHLILLASMPLTANGKLDRRALPLPDPELNRQQYVAPSNELEQTLAGVWGEVLNVQQVGLNDNFFELGGDSILSIQVVSRARQLGIHFTPRDLFQHQTVQTLARVASHTQRVSAEQGQLSGEASLTPIQHWFFDSRIPQPQHWNQALLLEPLGTLDGSLLEQALLAVLEQHDALRLRFSQAGGQAGGQWRAEYLPLSDAPLLWQVRVPSMATCEALFADAQRSLDLEHGPLLRAVLVDGPEGEQRLLLTIHHLVVDGVSWRVLLEDLQNAYRQLQAGQALKLPAKTSALRDWSSRLQAYAGSESLREELGWWQQQLAGPAAQLPGLKATGSQQHQQAQSHSVTLDAERTRQLLQQAPAAYRTQVNDLLLTALARVLCRWSGQPSALVQLEGHGREALFDEIDLTRTVGWFTSAYPLRLTPLQVEEAAGQGASIKAIKEQLRAVPHKGLGYGVLRYLADESCREALAALPLAPVTFNYLGQFDQSFGTDALLRPLDESVGPAHAPEAPLPNELSIDSQVYGGELVLRWTYSSERFDAELISELASAYLGELQSLIGHCLKDDAGGLTPSDFPLARLTQAQLDGLPVPAAQIEDVYPLTPMQEGMLLHTLLEPGTGLYYMQDRYRINSELDPERFAQAWQAVVARHEALRASFCWNVGEDMLQVIHKPGRTPIEFLDWSAVPEAEQEAKLQALHKQEREAGFDLLNQAPFHLRLIRVGAARYWFMMSNHHILIDAWCRSLLMNDFFEIYTALGEGREAQLAVPPRYRDYIGWLQHQSLSEARQWWRQNLEGFERTTPIPSDRPFLREHAGDSGGMIVGDCYTRLDARDGAQLRELAQQHQLTVNTFAQAAWALVLRRMSGDRDVLFGVTVAGRPVEMPEMQRTVGLFINSIALRVKLPQDGERCSVRQWLSGLLDSNMQLREYEYLPLVAIQETSELPKGQPLFDSLFVFENAPVEVSVLDRAQSLNASSDSGRTHTNFPITAVCYPGDDLGLHLSYDQRYFEQATIERMLGEFKRLLLALMQGFHGDMAELPLLGEEEQDFLLAGCNQSEHEYPLERSYVELFEAQVAAHPQRIAASCLDQRYSYAELNRCSNRLGHALVANGVGFDQPVALLAERGLELLGMIIGSFKAGAGYLPLDPGLPGQRLGRIIELSRTPILVCTAACREQAQALLDEFGCAGRPRLLVWEELQAAGHAEHNPGRYSAPDNLAYVIYTSGSTGLPKGVMVEQRGMLNNQLSKVPYLHLSEADVIAQTASQSFDISVWQFLAAPLFGARVDIVPNTIAHDPQGLLAHVEEQGITVLESVPSLIQGMLAQDAIALDGLRWMLPTGEAMPPELAHQWLLRYPQVGLVNAYGPAECSDDVAFFRVDMASTRGAYLPIGTPTDNNQLYLMDEALELVPLGAVGELCVAGTGVGRGYVSDPLRTALAFVPHPFGAAGERLYRTGDLARRRSDGVLEYVGRIDHQVKIRGYRIELGEIEARLHEQPELRDAAVGVQEGVNGKHLVGYLVASDTNLSPSECLERIKPRLRAELPEYMVPLHWLWLAHLPLNANGKLDRKALPALEIGQLQSQDYLAPGNELEQTLADIWAEVLKVERVGVRDNFFELGGHSLLATQIASRVQKTLQRNVPLRAMFECSTVQELAAYIDGLGANEISEEKVDRLSDLMAELEGL");
                        ISequence seqB = new Sequence(Alphabets.Protein, "MVGFHRRCCELTVEERSSTREEGAWVAFPCVPVNSRVSTKIQQLLNTLKRPKRPPLKEFFVDDSEEIVEVPQPDPNQPKPEGRQMTPVKGEPLGVICNWPPALESALQRWGSTQAKCPCLTGLDVTGKPVYTLTYGKLWSRSLKLAYTLLNKLGTKNEPVLKPGDRVALVYPNNDPVMFMVAFYGCLLAEVIPVPIEVPLTRKDAGGQQIGFLLGSCGIALALTSEICLKGLPKTQNGEIVQFKGWPRLKWVVTDSKYLSKPPKDWQPHISPAGTEPAYIEYKTSKEGSVMGVTVSRLAMLSQCQALSQACNYSEGETVVNVLDFKKDAGLWHGMFANVMNKMHTISVPYSVMKTCPLSWVQRVHAHKAKVALVKCRDLHWAMMAHRDQRDVSLSSLRMLIVTDGANPWSVSSCDAFLSLFQSHGLKPEAICPCATSAEAMTVAIRRPGVPGAPLPGRAILSMNGLSYGVIRVNTEDKNSALTVQDVGHVMPGGMMCIVKPDGLPQLCRTDEIGEICVSSRTGGMMYFGLAGVTKNTFEVIPVTSSGSPVGDVPFIRSGLLGFVGPGSLVFVVGKMDGLLMVSGRRHNADDIVATGLAVESIKTVYRGRIAVFSVSVFYDERIVVVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKTPLGGIHISQTKQLFLEGSLHPCNILMCPHTCVTNLPKPRQKQPGVGPASVMVGNLVAGKRIAQAAGRDLGQIEENDLVRKHQFLAEILQWRAQATPDHVLFMLLNAKGTTVCTASCLQLHKRAERIASVLGDKGHLNAGDNVVLLYPPGIELIAAFYGCLYAGCIPVTVRPPHAQNLTATLPTVRMVVDVSKAACVLTTQTLMRLLKSREAAAAVDVKTWPAIIDTDDLPRKRLPQLYKPPTPEMLAYLDFSVSTTGMLTGVKMSHSAVNALCRAIKLQCELYSSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLIPPMELENNLFLWLATVNQYKIRDTFCSYSVMELCTKGLGNQVEVLKTRGINLSCIRTCVVVAEERPRVSLQQSFSKLFKDIGLSPRAVSTTFGSRVNVAICLQGTSGPDPTTVYVDLKSLRHDRVRLVERGAPQSLLLSESGKILPGVKVVIVNPETKGPVGDSHLGEIWVNSPHTASGYYTIYDSETLQADHFNTRLSFGDAAQTLWARTGYLGFVRRTELTAATGERHDALYVVGALDETLELRGLRYHPIDIETSVSRVHRSIAECAVFTWTNLLVVVVELCGSEQEALDLVPLVTNVVLEEHYLIVGVVVVVDPGVVPINSRGEKQRMHLRDSFLADQLDPIYVAYNM");
                        ISequence seqC = new Sequence(Alphabets.Protein, "MKLLHERMMHSLARYPRQTAVVDEQDALSYEALELRIREFVAMLCALGVGQGQRILLWAHKSVDLVAVMQAALRLGVVYVPVDPLSPVSRLEKIAGDSQAVLVLCTAARLEELAGSALAQVRSVVLDDPASAGYWRNIDTGSSVVPTLAIQPDDLAYILYTSGSTGVPKGVALSHGNALAFVDWACERYCFQPGERFANHAPLHFDLSVLDIYCALNVGATVCLVPESIAFSPRLLTDFIRQHEISIWYSVPSVLMMMMQDGDLLSDIQDTLRVLLFAGEPFPVKHLRDLRAAYADVRLANLFGPTETNVCTAFEVGAIDPERVLPVPIGTAASGNQVWAQKPDGSRCAVGEEGELVVQGPTVMLGYFAKPAQEGPYKTGDMVRQRPDGNYEYLGRRDDMLKVRGNRIERGEVEAALLAHPQVSEAAVLVVGEGMNAQLWGVLVAHTRDALSLIDLKRHCAQRLPRYMIIDKVLCLDALPRNANGKVDRFALARQVEG");
                        ISequence seqD = new Sequence(Alphabets.Protein, "MNQFPNQPGNFGQNYYKPVQGSIPANSEATNFQQNNSRENKSECELRQNSIAASMSAYPNGMYAGAENHNVENHENYTMVGHDHMEEVYGDDLVNEPRIAYSSDIVATFDGKDFGSNLHVDDTLDQQWAHFAGKQQHPLEPREIPFPVTDPLNSKIEMKQFTNIAAVLRYRGVHSAKKTAFIILDNKGKEFTSITWEKLASRAEKVAQVIRDKSGLFRSDRVVLMYRDCEAIDFVVSLFGCFIAGVVAVPINRFDDYNELSSILTTTSARLALTTDANLKAFQRDLNAKKLHWPKNVEWWKTNEFGGFHLKKKAEMPPLQVPDLAYIEFSRSPIGELHGVVISHRTILHQMNCLAAIHATAPAYESDKLDYLSIDREYTEGLSKSGLFLTYLDLRQAIGLILGVLHTVFSGYTTVWCPQNAVFVPGLWANLATRYRASFMLTDYAGLKTIAYNYQNDPKATLGFSKKHSVDLSSLRMCMVDCLNVDCEFQEIVSDRWLKPLGNQNPRATFVPLLCLPEHGGMVISMKDWIGGEEFMSPKGFKSPRTPENEISEVLLEKEALKLNEVVVLAEDDKARRQSKHPNTIRVGAFWYPFVDATLAIVDPETQVLCLPNIVGEIWVDSPSLSGGFFALPKQTEAIFHARTSFISSDTFQPIPSNQEFLRTGLLGFIRKGKVYVLGLYEDRLQQKVEWVDNGKQDTIFFHHYTSHLVNTIMRKVSKVFDCSAFDIFVNSEHLPVVLLESPAANIPTEANGNQVVINYGLLDLITTECVECLLEDHQVRVYCVLICAPFTLPRVTKNGRQEIGNMMCRRAFEHGTLPFLYVKFAVERAVLNLPVGEDAIDGIWSSYASGIRQNLLSDQELQYSGFIDRSLRYDAKTSVDISSCHTMLQLLQLRVAKNAEDIAYITIDGRGREGKNITWRKFDQRVATIIRYLQKKKYIKPGRVVVLMYTHSEDFVYALYACFYLGLIPIPVPPLDHMRLSEDVPAFLFLIKHYYVSAVLVNSEADTALRAKTTSQHLKQSAMAAKVVLPSFIVTSKISKQTKSIKELNVKLDPICLDPAFPALVWAFWSPDHRLTLTAYNHQTLLSICQIHKETCQMTHKRPLLGHVRSMSGIGFFHTCLMGVFLGTTTYLLSPVDFANNPLLLFQIISKYKIKDTYATFQTLNYIQNQQPTKWPNLSCLENLMIPHDGRISAFYIASLQKYFVKHGLSPYAFSTVYSNCLNPFISTRSYMGAIPTPQLLDLRALRHGLIQPCESADKPYALPLLDSGMVPVSTQLAIVNPDTRELCRVGEYGEIWMRSSANAISFFQSTDPVDMMRFNATNSDGFLGNGYVRTGDLGFLQITSHSMGPNAPVVDMQLLYVLGPIGETFEVNGLSHFPSDIEDTIERSHPRIARGGTAVFQSAGRVVVVIEALGQDFLAAIVPVVINSILDEHQIIADVVAFTSRGNFPRSRLREKQRGKILASWVTGRLRTTQVFYIRGSGEGEFQSSYVPDYNPSLRSTPSVSSRSTLPQRVF");
                        ISequence seqE = new Sequence(Alphabets.Protein, "MLGPSAHIDTFTRDNLPPTDQWPDFLLDGFDYPEHLNVGVELTDAMVDKGFGDHTALIGNGRRRTYKELSDWTNRLAHVLVEDLGVKPGNRVLIRSANNPAMVACWLAATKAGAVVVNTMPMLRAGELAKIIDKAEITHALCDTRLMEELVSCAKTSKHLRTVVGFDGTSNHDAELDRLALQKPVRFQAVETGRDDVALLGFTSGTTGDPKATMHFHRDLLIIADGYAREVLGVVPEDVFIGSPPLAFTFGLGGLAVFPLRFGAAATLLEQASPPNMVEIIQQYRATVCFTAPTAYRFMLKAMEEGADLSSLRAAVSAGETLPAPVYDEWIAKTGKPMLDGIGATEMLHIFISNRFDDHRPACTGKPVTGYQVRILDENGNEAPRGEVGRLAVRGPTGCRYLADDRQSGYVQNGWNVTGDSFVMDDDGYLHFAARSDDMIVSSGYNIAGPEVEAALLSHPAVAECGVIGAPDEARGHIVEAHVVLTPGHTGDALMVKTLQDHVKATIAPYKYPRSVRFIEALPKTQTGKIQRFRLRTDIQ");
                        ISequence seqF = new Sequence(Alphabets.Protein, "MAERGLEPSPAAVAALPPEVRAQLAELELELSEGDITQKGYEKKRSKLLSPYSPQTQETDSIGQKERNQTPAPTAAQTSAPSKYHRSRSGGARDERYRSDIHTEAVQAALAKHKEQKMALPMPTKRRSTFVQSPADACTPPDTSSASEDEGSLRRQAALSAALQQSLQNAESWINRSIQGSSTSSSASSTLSHGEVKGTSGSLADVFANTRIENVSAPPDVTATTSSSSSSLRPANIDLPPSGIVKGMHKGSNRSSLMDTADGVPVNSRVSTKIQQLLNTLKRPKRPPLKEFFVDDSEEIVEGIPQPDPNQPKPEGRQMTPVKGEPLGVICNWPPALESALQRWGSTQAKCPCLTGLDVTGKPVYTLTYGKLWSRSLKLAYTLLNKLGTKNEPVLKPGDRVALVYPNNDPVMFMVAFYGCLLAEVIPVPIEVPLTRKDAGGQQIGFLLGSCGIALALTSEICLKGLPKTQNGEIVQFKGWPRLKWVVTDSKYLSKPPKDWQPHISPAGTEPAYIEYKTSKEGSVMGVTVSRLAMLSQCQALSQACNYSEGETVVNVLDFKKDAGLWHGMFANVMNKMHTISVPYSVMKTCPLSWVQRVHAHKAKVALVKCRDLHWAMMAHRDQRDVSLSSLRMLIVTDGANPWSVSSCDAFLSLFQSHGLKPEAICPCATSAEAMTVAIRRPGVPGAPLPGRAILSMNGLSYGVIRVNTEDKNSALTVQDVGHVMPGGMMCIVKPDGLPQLCRTDEIGEICVSSRTGGMMYFGLAGVTKNTFEVIPVTSSGSPVGDVPFIRSGLLGFVGPGSLVFVVGKMDGLLMVSGRRHNADDIVATGLAVESIKTVYRGRIAVFSVSVFYDERIVVVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKTPLGGIHISQTKQLFLEGSLHPCNILMCPHTCVTNLPKPRQKQPGVGPASVMVGNLVAGKRIAQAAGRDLGQIEENDLVRKHQFLAEILQWRAQATPDHVLFMLLNAKGTTVCTASCLQLHKRAERIASVLGDKGHLNAGDNVVLLYPPGIELIAAFYGCLYAGCIPVTVRPPHAQNLTATLPTVRMVVDVSKAACVLTTQTLMRLLKSREAAAAVDVKTWPAIIDTDDLPRKRLPQLYKPPTPEMLAYLDFSVSTTGMLTGVKMSHSAVNALCRAIKLQCELYSSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLIPPMELENNLFLWLATVNQYKIRDTFCSYSVMELCTKGLGNQVEVLKTRGINLSCIRTCVVVAEERPRVSLQQSFSKLFKDIGLSPRAVSTTFGSRVNVAICLQGTSGPDPTTVYVDLKSLRHDRVRLVERGAPQSLLLSESGKILPGVKVVIVNPETKGPVGDSHLGEIWVNSPHTASGYYTIYDSETLQADHFNTRLSFGDAAQTLWARTGYLGFVRRTELTAATGERHDALYVVGALDETLELRGLRYHPIDIETSVSRVHRSIAECAVFTWTNLLVVVVELCGSEQEALDLVPLVTNVVLEEHYLIVGVVVVVDPGVVPINSRGEKQRMHLRDSFLADQLDPIYVAYNM");
                        ISequence seqG = new Sequence(Alphabets.Protein, "MAERGLEPSPAAVAALPPEVRAQLAELELELSEGDITQKGYEKKRSKLLSPYSPQTQETDSAVQKELRNQTPAPSAAQTSAPSKYHRTRSGGARDERYRSDIHTEAVQAALAKHKEQKMALPMPTKRRSTFVQSPADACTPPDTSSASEDEGSLRRQAALSAALQQSLQNAESWINRSIQGSSTSSSASSTLSHGEVKGTSGSLADVFANTRIENFSAPPDVTTTTSSSSSSSSIRPANIDLPPSGIVKGMHKGSNRSSLMDTADGVPVSSRVSTKIQQLLNTLKRPKRPPLKEFFVDDSEEIVEVPQPDPNQPKPEGRQMTPVKGEPLGVICNWPPALESALQRWGTTQAKCSCLTALDMTGKPVYTLTYGKLWSRSLKLAYTLLNKLGTKNEPVLKPGDRVALVYPNNDPVMFMVAFYGCLLAEVIPVPIEVPLTRKDAGGQQIGFLLGSCGIALALTSEVCLKGLPKTQNGEIVQFKGWPRLKWVVTDSKYLSKPPKDWQPHISPAGTEPAYIEYKTSKEGSVMGVTVSRLAMLSHCQALSQACNYSEGETIVNVLDFKKDAGLWHGMFANVMNKMHTISVPYSVMKTCPLSWVQRVHAHKAKVALVKCRDLHWAMMAHRDQRDVSLSSLRMLIVTDGANPWSVSSCDAFLSLFQSHGLKPEAICPCATSAEAMTVAIRRPGVPGAPLPGRAILSMNGLSYGVIRVNTEDKNSALTVQDVGHVMPGGMMCIVKPDGPPQLCKTDEIGEICVSSRTGGMMYFGLAGVTKNTFEVIPVNSAGSPVGDVPFIRSGLLGFVGPGSLVFVVGKMDGLLMVSGRRHNADDIVATGLAVESIKTVYRGRIAVFSVSVFYDERIVVVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKTPLGGIHISQTKQLFLEGSLHPCNILMCPHTCVTNLPKPRQKQPGVGPASVMVGNLVAGKRIAQAAGRDLGQIEENDLVRKHQFLAEILQWRAQATPDHVLFMLLNAKGTTVCTASCLQLHKRAERIASVLGDKGHLNAGDNVVLLYPPGIELIAAFYGCLYAGCIPVTVRPPHAQNLTATLPTVRMIVDVSKAACILTSQTLMRLLRSREAAAAVDVKTWPTIIDTDDLPRKRLPQLYKPPTPEMLAYLDFSVSTTGMLTGVKMSHSAVNALCRAIKLQCELYSSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLIPPMELENNLFLWLSTVNQYKIRDTFCSYSVMELCTKGLGNQVEVLKTRGINLSCVRTCVVVAEERPRVALQQSFSKLFKDIGLSPRAVSTTFGSRVNVAICLQGTSGPDPTTVYVDLKSLRHDRVRLVERGAPQSLLLSESGKILPGVKVVIVNPETKGPVGDSHLGEIWVNSPHTASGYYTIYDSETLQADHFNTRLSFGDAAQTLWARTGYLGFVRRTELTAATGERHDALYVVGALDETLELRGLRYHPIDIETSVSRIHRSIAECAVFTWTNLLVVVVELCGSEQEALDLVPLVTNVVLEEHYLIVGVVVVVDPGVIPINSRGEKQRMHLRDSFLADQLDPIYVAYNM");
                        ISequence seqH = new Sequence(Alphabets.Protein, "MADRGCPLEAAPLPAEVLESLAELELELSEGDITQKGYEKKRAKLLARYIPLIQGVDPCLQTENRIPGPLLTAATAKPQKSRATNSRDERFRSDVHTEAVQAALAKYKERKMPMPSKRRSALVHSSVETYTPPDTSSASEDEGSLRRPGRLTSTLLQSHSGIEPWLDRVIQGSSTSSSASSTSSHPGGRPAAAPSASTALAGLTAHAHIDLHSAPPDVTTGLVEHSSYERPQMASVRGIPRGHGRNVLETADGVPVNSRVSSKIQQLLNTLKRPKRPPLKEFFVDDFEELLEVQQPDPNQPKPEGDQMAVLKGEPLSVGTNGPLSLLAALQLWGTTQPKAPCLTALDTAGKATCTLTYGKLWSRSLKLAYTLLNKLTSKNEPLLNPGDRVALVFPNSDPVMFMVAFYGCLLAELVPVPIEVPLTRKDAGSQQVGFLLGSCGVTLALTTDACQKGLPKAPTGEVATFKGWPPLAWLVIDGKHLTRPPKDWYPLAQDTGSRTAYIEYKTSKEGSTVGVTVSHSSLLAQCQALTQACGYTEAETLTNVLDFKRDAGLWHGVLTSVMNRMHVITIPYALMKVNPLSWIQKVCSYKARAALVKSRDMHWSLLAQRGQRDVCLSSLRMLIVADGANPWSISSCDAFLNVFQSRGLRPEVICPCASSPEALTVAIRRPPDLGGPPPRKAVLSMNGLSYGVIRVDTEEKLSVLTVQDVGQVMPGASVCVVKVDGAPYLCKTDEIGEICVNSVATGTAYYGLLGITKNTFETVPVTADGVPVSDRPFTRTGLLGFIGPDNLVFVVGKLDGLMVVGVRRHNADDIVATALAVEPMKFVYRGRIAVFSVTVLHDDRIVLVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKAPLGGIHISETKQRFLEGTLHPCNVLMCPHTCVTNLPKPRQKQPEVGPASMIVGNLVAGKRIAQASGRELAHLEDSDQARKFLFLADVLQWRAHTTPDHPLFLLLNAKGTVTSTATCIQLHKRAERVAAALMEKGRLDAGDHVALVYPPGVDLIAAFYGCLYCGCVPVTVRPPHPQNLGTTLPTVKMIVEVSKSACVLSTQAITRLLKSKEAAAAVDVRTWPTILDTDDIPKKKVASIFRPPSPDVLAYLDFSVSTTGILAGVKMSHAATSALCRSIKLQCELYPSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLVPPLELESNVSLWLSAVSQYKARVTFCSYSVMEMCTKGLGAQTGALRMKGVNLSCVRTCMVVAEERPRISLTQSFSKLFKDLGLPARAVSTTFGCRVNVAICLQGTTGPDPTTVYVDMRALRHDRVRLVERGSPHSLPLMESGKILPGVKVIIAHTETKGPLGDSHLGEIWVSSPHNATGYYTVYGEETLHADHFSARLSFGDTQTIWARTGYLGFLRRTELTDASGERHDALYVVGSLDETLELRGMRYHPIDIETSVIRAHRSIAECAVFTWTNLLVVVVELDGLEQDALDLVALVTNVVLEEHYLVVGVVVIVDPGVIPINSRGEKQRMHLRDGFLADQLDPIYVAYNM");
                        ISequence seqI = new Sequence(Alphabets.Protein, "MSVVESSLPGVLRERASFQPNDKALTFIDYERSWDGVEETLTWSQLYRRTLNLAAQLREHGSTGDRALILAPQSLDYVVSFIASLQAGIVAVPLSIPQGGAHDERTVSVFADTAPAIVLTASSVVDNVVEYVQPQPGQNAPAVIEVDRLDLDARPSSGSRSAAHGHPDILYLQYTSGSTRTPAGVMVSNKNLFANFEQIMTSYYGVYGKVAPPGSTVVSWLPFYHDMGFVLGLILPILAGIPAVLTSPIGFLQRPARWIQMLASNTLAFTAAPNFAFDLASRKTKDEDMEGLDLGGVHGILNGSERVQPVTLKRFIDRFAPFNLDPKAIRPSYGMAEATVYVATRKAGQPPKIVQFDPQKLPDGQAERTESDGGTPLVSYGIVDTQLVRIVDPDTGIERPAGTIGEIWVHGDNVAIGYWQKPEATERTFSATIVNPSEGTPAGPWLRTGDSGFLSEGELFIMGRIKDLLIVYGRNHSPDDIEATIQTISPGRCAAIAVSEHGAEKLVAIIELKKKDESDDEAAERLGFVKREVTSAISKSHGLSVADLVLVSPGSIPITTSGKIRRAQCVELYRQDEFTRLDA");
                        ISequence seqK = new Sequence(Alphabets.Protein, "MADRGCPLEAAPLPAEVLESLAELELELSEGDITQKGYEKKRAKLLARYIPLIQGVDPCLQTENRIPGPLLTAATAKPQKSRATNSRDERFRSDVHTEAVQAALAKYKERKMPMPSKRRSALVHSSVETYTPPDTSSASEDEGSLRRPGRLTSTLLQSHSGIEPWLDRVIQGSSTSSSASSTSSHPGGRPAAAPSASTALAGLTAHAHIDLHSAPPDVTTGLVEHSSYERPQMASVRGIPRGHGRNVLETADGVPVNSRVSSKIQQLLNTLKRPKRPPLKEFFVDDFEELLEVQQPDPNQPKPEGDQMAVLKGEPLSVGTNGPLSLLAALQLWGTTQPKAPCLTALDTAGKATCTLTYGKLWSRSLKLAYTLLNKLTSKNEPLLNPGDRVALVFPNSDPVMFMVAFYGCLLAELVPVPIEVPLTRKDAGSQQVGFLLGSCGVTLALTTDACQKGLPKAPTGEVATFKGWPPLAWLVIDGKHLTRPPKDWYPLAQDTGSRTAYIEYKTSKEGSTVGVTVSHSSLLAQCQALTQACGYTEAETLTNVLDFKRDAGLWHGVLTSVMNRMHVITIPYALMKVNPLSWIQKVCSYKARAALVKSRDMHWSLLAQRGQRDVCLSSLRMLIVADGANPWSISSCDAFLNVFQSRGLRPEVICPCASSPEALTVAIRRPPDLGGPPPRKAVLSMNGLSYGVIRVDTEEKLSVLTVQDVGQVMPGASVCVVKVDGAPYLCKTDEIGEICVNSVATGTAYYGLLGITKNTFETVPVTADGVPVSDRPFTRTGLLGFIGPDNLVFVVGKLDGLMVVGVRRHNADDIVATALAVEPMKFVYRGRIAVFSVTVLHDDRIVLVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKAPLGGIHISETKQRFLEGTLHPCNVLMCPHTCVTNLPKPRQKQPEVGPASMIVGNLVAGKRIAQASGRELAHLEDSDQARKCRCEAPLSAQFLFLADVLQWRAHTTPDHPLFLLLNAKGTVTSTATCIQLHKRAERVAAALMEKGRLDAGDHVALVYPPGVDLIAAFYGCLYCGCVPVTVRPPHPQNLGTTLPTVKMIVEVSKSACVLSTQAITRLLKSKEAAAAVDVRTWPTILDTDDIPKKKVASIFRPPSPDVLAYLDFSVSTTGILAGVKMSHAATSALCRSIKLQCELYPSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLVPPLELESNVSLWLSAVSQYKARVTFCSYSVMEMCTKGLGAQTGALRMKGVNLSCVRTCMVVAEERPRISLTQSFSKLFKDLGLPARAVSTTFGCRVNVAICLQGTTGPDPTTVYVDMRALRHDRVRLVERGSPHSLPLMESGKILPGVKVIIAHTETKGPLGDSHLGEIWVSSPHNATGYYTVYGEETLHADHFSARLSFGDTQTIWARTGYLGFLRRTELTDASGERHDALYVVGSLDETLELRGMRYHPIDIETSVIRAHRSIAECAVFTWTNLLVVVVELDGLEQDALDLVALVTNVVLEEHYLVVGVVVIVDPGVIPINSRGEKQRMHLRDGFLADQLDPIYVAYNM");
                        ISequence seqL = new Sequence(Alphabets.Protein, "MSVISTLRDRATTTPSDEAFVFMDYDTKTGDQIDRMTWSQLYSRVTAVSAYLISYGRHADRRRTAAISAPQGLDYVAGFLGALCAGWTPVPLPEPLGSLRDKRTGLAVLDCAADVVLTTSQAETRVRATIATHGASVTTPVIALDTLDEPSGDNCDLDSQLSDWSSYLQYTSGSTANPRGVVLSMRNVTENVDQIIRNYFRHEGGAPRLPSSVVSWLPLYHDMGLMVGLFIPLFVGCPVILTSPEAFIRKPARWMQLLAKHQAPFSAAPNFAFDLAVAKTSEEDMAGLDLGHVNTIINGAEQVQPNTITKFLRRFRPYNLMPAAVKPSYGMAEAVVYLATTKAGSPPTSTEFDADSLARGHAELSTFETERATRLIRYHSDDKEPLLRIVDPDSNIELGPGRIGEIWIHGKNVSTGYHNADDALNRDKFQASIREASAGTPRSPWLRTGDLGFIVGDEFYIVGRMKDLIIQDGVNHYPDDIETTVKEFTGGRVAAFSVSDDGVEHLVIAAEVRTEHGPDKVTIMDFSTIKRLVVSALSKLHGLHVTDFLLVPPGALPKTTSGKISRAACAKQYGANKLQRVATFP");
                        ISequence seqM = new Sequence(Alphabets.Protein, "MQDLIAIVGSACRFPGQSDSPSKLWTRLKEPIDLRKTFPPQRLNLARFYHPDGEHHGSTDVRGTSYLLSEDPRQFDASFFNINPREAEGMDPQQRLLLETAFEALEAAGYSLEAMNGSKTSVHVGVMNSDFSNIQLRDPEVLPTYNATGTAISILSNRLSYFFNLKGPSVTIDTACSSSLVALHQAVQGLRAGDATAAIVAGANLIFDPAMYIAESSLHMLSPDSCSRMWDKDANGYARGEGVGVLVLKPLSRAIMDGDHVEAVIRSTGVNSDGRTKGITMPNAESQTELIRQTYRDAGLDPIRDRCQYFECHGTGTATGDPIEARAVHDAFFPTETRTASNTLIPDGKLYVGSVKTIIGHLEGCAGIAGVLKAVLAIKNRTIPPNMHFHEPNPRVIPFCDRLEIPTVPIPWPDTGRSPLRASINSFGFGGTNAHAIIEGYDALSSPVREATITPDDLFIGPLLFSANSSSSLVANVKNMAERIRSDPSIDLESLVWTLYARRSVLPVKAFFTGGTVQRLLNFMDRFVAESEETTSSTAGIKYQPLNPTETPGILGIFTGQGAQWALMGFSLLQQNHVFRAAIERCQAALATLHDSPSWSLLDELVKGADESRIGEAALSQPLCTALQIGLVDMLHSAGIKLDAVVGHSSGEIAAVYAAGIINADAAIKIAYYRGYYAKLAAGARGQAGRMMATAMSFDEAEEFCAQPQWRGRLAAAASNSPQSVTLSGDIDAIEEALQLFEAEKKFARILRTDTAYHSHHMQPCAERYLKSLQACQIKVSPPRKDCVWISSVRGDTQLLEGDLSTLADQYWVDNMCNPVLFSQAVETSIWNGGPFDVAVELGPHPALKGPVEQTIKAVYGPIPAYAGLMRRGDNEIEAFSGGVGFVWSRLGPDYVDMSGYRKGFIGADRLRPQVLKDLPVYCWDHSKLYWKESRISRQYRLRQDTPHELLGRRVPDDSDDSRRWRNVLRLSELPWIRGHVFQGQVLFPGAGYVAMALEAARELTEGRPATLFEIENVSLRRALVISEQAGIETAFTARVIDAKEGRNDTNRLEADFACYFCSAEGNEPLVKACTGRLIINYGDPAAEALPQRTRLPSNNVPVDMGRFYDAMNSVGLDYQGIFRGLVHGKRSLGCSSVKAAWGEDMQIDNYVVNPGFLDVAFQSVYTAFSSPASGEIWAPYLPIHIERLAVNPNVSYRSAKDEVQMEADAFVTVSNSTLLKGDIQLYQIDSQHAAIQVEGISMKSMSEPQPENDRCLFSETVWGPDVSLGVSEVTSRATEDDTPLVEALDRVSLFYWQNLLQEVGAEEIAQFQWYHQRMFDAVRFQVSSVRSGQHPIAKPEWLEDDWETILAVSEPYASRVDMRLIHAVGENLASVVREDTQLLEVMVQDDMLNRFYMEGYGFSVINNAVSDALEQITFKYPHANILEIGAGTGGTTRSILDRIGSRYGSYTYTDISPAFFEAAAEKFEDAREKIQFKVLDVEKEVGAQGFDEHGYDVIVAANVLHATRKLEETMKNARALLKPGGYLVLMEITGPDVLRTQFIMGGLPGWWYGVDDGRVLSPAISAQQWNQLLLDTGFSGLDCLAPDMLDEYKHSFSLMVSQAIDEKIQMLRDPVLSKTLLPAADVLIIGGRTHSNVIHEIRRYLSAWTSRVEVWDRIQTKQLDQLAEFENIICLEELDQPLFSTTMTSETLLALQKVLSGTKNVVWAINSAKSQNPHVNMTVGLGRAMRTEVPGLNLLFVDIDAVENPIACAQLLSQMLLQLRTGSLTAAENTLWAAELEIRVQDGRRLIPRVLPMTQMNETYNASRRVISKPVDIETTCVKMEDSAGSLRLVPGACMVDGPVQRGHNRLRIHRSLPLAFGGGTPCYLCSGDLRENGLPALALSTSNANLADIPNDMVFALDQDQPCDAAMLEATGRQLLARDICNRLPASNRILVYQPSHDFAQALLLTGRHFSFVSADKASCFSDWVYIHSRASRRAIQSRLPKDFDALIDCTGELPENLIACLSRNCRVLNMTLHQLDGSLLGPAYSAALAHVSSSSIGPSIRVKDLPLATPSKLPMVDWTGVDTVELTLQPLSMRKLFSSSATYLLAGMTGDLGLSLCRWMIDNGARNIALTSRNPNVGEELLQDMRRSGADIRVFRNDITDQNAVRTLVENIRLSMPPIAGVFNACMVLRDGLFSEMDVDTLNDPLAPKVDGSKILDDIFQDDSLDFFVLFSSLASIIGNAANPTTTLQTCSSLVLPPTAARRVWQPSPHNSSRQHEIILGLEPFIDSPNATKRPPWEHNPMFSHYVSRPLLQETPAATTVEAAADVKQLLRSTVSGEAVIPIVQEAFARKLESMMQLPANSINLNVPLIDLGCDSLLAIEIRRWFIKELGIDVPVLKVLSGDTTAQICEDAVRQFLALQLEKQDTVAPNMTEKPETKSHPSSNATIIDNDALDKADAANGDYESSSQGDDSRGNSSSSSSHTSPSIQATTPDIKPNTPVPLDVDADPLGRGFQRTMIRAEPASFAQSRLWFLTQYLHDPTTYNVTVRYDVRGNLPASRIVSSLNRTICHHQSLQTCFFMDSDKETLMQGVLSPSYSSIKHIPSGSEQTVREEYNRLRSRVWDLQKGETFAVTVVSLSPEQHTIIFGYHHIVMDGVSWHLFLRDLDLAYRLRPLPSIEMEYIDWSKKQFQSAQRGDFTRPLEYWRKQHSPPPSVMPLLPMAQTSSRKPLTSYDSHVISVQIDRQLVSHIRLVSQSLGVTPFHFHLAVIQSILCRLLKTEDLCIGVVDANRTSEAHSGTVGFFLNLLPVRFTTREHSTFQDLVSSTKRTILGAISNSEAPFDLILEDLKVLRSIEHSPLFQVAVNYRMGAMLQVPLGDGTMEVAAADDAKNPYDLSFGITETSTGTCLLELTSQKQLYTEQSTELLLQMYMDVLRASSDNPSLPVNQLPVTLEPSTGKALAVAKGPRAEYSWPNTLWERYDAIRKSFPEETAIKDGKSELSYSQLTRSVEKLAAMLISQGVTAGDSVGVLLHPSIDAIACMLALLRVGCIYTPLDTRLPVARLSIIVNRSKSSLVLYHASTHDVALELGKFSKLANVEDMCESGQAQVPAIAPQSNPASFLFYTSGSTGTPKGILLSQQNFVNHLAAKTDKLNLGREVVLQQSSLGFDMSVVQTFCALGNGGTLVIAPKEARGDPIALSTIMAKERVTLTIATPSEYSLLLRFGLEQLQRPYSWRHACMGGEVVSRQLVQQFCQLDHPDLQLTNCYGPTEITAAATFQDISLQMKDQSTTDGSLVGKALPNYSVYIMDASSGSPVPIGVTGEICIGGAGVSLGYLNSLEQTDAKFVRDPFASPEDITRGWTKMYRTGDMGCLTEDGTLIFMGRMDGDNQVKLNGLRIELDEIANSILTTGNDLVSEAVVTVHSGSGSGSPLLVAHVVPLGDNVDNSRLQQLARDLPLPQYMLPSVVVSLDRLPINANGKVDRKAIMALPLPTQRTESAAGTGTDTARHLSLAEGELRLLWEKVLPASGGPSRLDADSDFFMRGGTSMLLVRLQGAIKESIGVSIPVAELYQFPTLGQMARRISRRKEDHQASHATVINWDSETALTQDLIYAAKNQFSTRQTKAHDRQDILLTGSTSFLGKNILQSLLHNPLVERVHCVAVPAEDIPRLPASEKISIYTGSLLTPSLGLTKTEIAVLQSSLDVIIHAGSTGHCLNNYSSLRASNVDSTKFLAAIALLCRIPIHFISSNRVTLLSGSTSLPPASVSSSLPNTDGSEGFTASKWASERLLESVANLASGLPVTIHRPCAVFGEEAPNEDALNALLKYSKLTRCVPRFENFEGYLDFEDVHRVAATIAADALSAESRESKSAARVRHHSSGHKVSMKDFKGRMETLFACPFKEVSMAEWTERALQAGIDPLITGYLEAMTMKGEIIRFPYMGEAGSL");
                        ISequence seqN = new Sequence(Alphabets.Protein, "RFRSDVHTEAVQAALAKYKERKMPMPSKRRSALVHSSVETYTPPDTSSASEDEGSLRRPGRLTSTLLQSHSGIEPWLDRVIQGSSTSSSASSTSSHPGGRPAAAPSASTALAGLTAHAHIDLHSAPPDVTTGLVEHSSYERPQMASVRGIPRGHGRNVLETADGVPVNSRVSSKIQQLLNTLKRPKRPPLKEFFVDDFEELLEVQQPDPNQPKPEGDQMAVLKGEPLSVGTNGPLSLLAALQLWGTTQPKAPCLTALDTAGKATCTLTYGKLWSRSLKLAYTLLNKLTSKNEPLLNPGDRVALVFPNSDPVMFMVAFYGCLLAELVPVPIEVPLTRKDAGSQQVGFLLGSCGVTLALTTDACQKGLPKAPTGEVATFKGWPPLAWLVIDGKHLTRPPKDWYPLAQDTGSRTAYIEYKTSKEGSTVGVTVSHSSLLAQCQALTQACGYTEAETLTNVLDFKRDAGLWHGVLTSVMNRMHVITIPYALMKVNPLSWIQKVCSYKARAALVKSRDMHWSLLAQRGQRDVCLSSLRMLIVADGANPWSISSCDAFLNVFQSRGLRPEVICPCASSPEALTVAIRRPPDLGGPPPRKAVLSMNGLSYGVIRVDTEEKLSVLTVQDVGQVMPGASVCVVKVDGAPYLCKTDEIGEICVNSVATGTAYYGLLGITKNTFETVPVTADGVPVSDRPFTRTGLLGFIGPDNLVFVVGKLDGLMVVGVRRHNADDIVATALAVEPMKFVYRGRIAVFSVTVLHDDRIVLVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKAPLGGIHISETKQRFLEGTLHPCNVLMCPHTCVTNLPKPRQKQPEVGPASMIVGNLVAGKRIAQASGRELAHLEDSDQARKFLFLADVLQWRAHTTPDHPLFLLLNAKGTVTSTATCIQLHKRAERVAAALMEKGRLDAGDHVALVYPPGVDLIAAFYGCLYCGCVPVTVRPPHPQNLGTTLPTVKMIVEVSKSACVLSTQAITRLLKSKEAAAAVDVRTWPTILDTDDIPKKKVASIFRPPSPDVLAYLDFSVSTTGILAGVKMSHAATSALCRSIKLQCELYPSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLVPPLELESNVSLWLSAVSQYKARVTFCSYSVMEMCTKGLGAQTGALRMKGVNLSCVRTCMVVAEERPRISLTQSFSKLFKDLGLPARAVSTTFGCRVNVAICLQGTTGPDPTTVYVDMRALRHDRVRLVERGSPHSLPLMESGKILPGVKVIIAHTETKGPLGDSHLGEIWVSSPHNATGYYTVYGEETLHADHFSARLSFGDTQTIWARTGYLGFLRRTELTDASGERHDALYVVGSLDETLELRGMRYHPIDIETSVIRAHRSIAECAVFTWTNLLVVVVELDGLEQDALDLVALVTNVVLEEHYLVVGVVVIVDPGVIPINSRGEKQRMHLRDGFLADQLDPIYVAYNM");
                        ISequence seqO = new Sequence(Alphabets.Protein, "MADRGCPLEAAPLPAEVLESLAELELELSEGDITQKGYEKKRAKLLARYIPLIQDVHTEAVQAALAKYKERKMPMPSKRRSALVHSSVETYTPPDTSSASEDEGSLRRPGRLTSTLLQSHSGIEPWLDRVIQGSSTSSSASSTSSHPGGRPAAAPSASTALAGLTAHAHIDLHSAPPDVTTGLVEHSSYERPQMASVRGIPRGHGRNVLETADGVPVNSRVSSKIQQLLNTLKRPKRPPLKEFFVDDFEELLEVQQPDPNQPKPEGDQMAVLKGEPLSVGTNGPLSLLAALQLWGTTQPKAPCLTALDTAGKATCTLTYGKLWSRSLKLAYTLLNKLTSKNEPLLNPGDRVALVFPNSDPVMFMVAFYGCLLAELVPVPIEVPLTRKDAGSQQVGFLLGSCGVTLALTTDACQKGLPKAPTGEVATFKGWPPLAWLVIDGKHLTRPPKDWYPLAQDTGSRTAYIEYKTSKEGSTVGVTVSHSSLLAQCQALTQACGYTEAETLTNVLDFKRDAGLWHGVLTSVMNRMHVITIPYALMKVNPLSWIQKVCSYKARAALVKSRDMHWSLLAQRGQRDVCLSSLRMLIVADGANPWSISSCDAFLNVFQSRGLRPEVICPCASSPEALTVAIRRPPDLGGPPPRKAVLSMNGLSYGVIRVDTEEKLSVLTVQDVGQVMPGASVCVVKVDGAPYLCKTDEIGEICVNSVATGTAYYGLLGITKNTFETVPVTADGVPVSDRPFTRTGLLGFIGPDNLVFVVGKLDGLMVVGVRRHNADDIVATALAVEPMKFVYRGRIAVFSVTVLHDDRIVLVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKAPLGGIHISETKQRFLEGTLHPCNVLMCPHTCVTNLPKPRQKQPEVGPASMIVGNLVAGKRIAQASGRELAHLEDSDQARKFLFLADVLQWRAHTTPDHPLFLLLNAKGTVTSTATCIQLHKRAERVAAALMEKGRLDAGDHVALVYPPGVDLIAAFYGCLYCGCVPVTVRPPHPQNLGTTLPTVKMIVEVSKSACVLSTQAITRLLKSKEAAAAVDVRTWPTILDTDDIPKKKVASIFRPPSPDVLAYLDFSVSTTGILAGVKMSHAATSALCRSIKLQCELYPSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLVPPLELESNVSLWLSAVSQYKARVTFCSYSVMEMCTKGLGAQTGALRMKGVNLSCVRTCMVVAEERPRISLTQSFSKLFKDLGLPARAVSTTFGCRVNVAICLQGTTGPDPTTVYVDMRALRHDRVRLVERGSPHSLPLMESGKILPGVKVIIAHTETKGPLGDSHLGEIWVSSPHNATGYYTVYGEETLHADHFSARLSFGDTQTIWARTGYLGFLRRTELTDASGERHDALYVVGSLDETLELRGMRYHPIDIETSVIRAHRSIAECAVFTWTNLLVVVVELDGLEQDALDLVALVTNVVLEEHYLVVGVVVIVDPGVIPINSRGEKQRMHLRDGFLADQLDPIYVAYNM");
                        ISequence seqP = new Sequence(Alphabets.Protein, "MSDSSVLSLLRERAGLQPDDAAFTYIDYEQDWAGITETLTWSEVFRRTRIVAHEVRRHCTTGDRAVILAPQGLAYIAAFLGSMQAGAIAVPLSVPQIGSHDERVSAVLADASPSVILTTSAVAEAVAEHIHRPNTNNVGPIIEIDSLDLTGNSPSFRVKDLPSAAYLQYTSGSTRAPAGVMISHRNLQANFQQLMSNYFGDRNGVAPPDTTIVSWLPFYHDMGLVLGIIAPILGGYRSELTSPLAFLQRPARWLHSLANGSPSWSAAPNFAFELAVRKTTDADIEGLDLGNVLGITSGAERVHPNTLSRFCNRFAPYNFREDMIRPSYGLAEATLYVASRNSGDKPEVVYFEPDKLSTGSANRCEPKTGTPLLSYGMPTSPTVRIVDPDTCIECPAGTIGEIWVKGDNVAEGYWNKPDETRHTFGAMLVHPSAGTPDGSWLRTGDLGFLSEDEMFIVGRMKDMLIVYGRNHYPEDIESTVQEITGGRVAAISVPVDHTEKLVTVIELKLLGDSAGEAMDELDVIKNNVTAAISRSHGLNVADLVLVPPGSIPTTTSGKIRRAACVEQYRLQQFTRLDG");
                        ISequence seqQ = new Sequence(Alphabets.Protein, "MVGFHRRCCELTVEERSSTREEGAWVAFPCVPVNSRVSTKIQQLLNTLKRPKRPPLKEFFVDDSEEIVEGIPQPDPNQPKPEGRQMTPVKGEPLGVICNWPPALESALQRWGSTQAKCPCLTGLDVTGKPVYTLTYGKLWSRSLKLAYTLLNKLGTKNEPVLKPGDRVALVYPNNDPVMFMVAFYGCLLAEVIPVPIEVPLTRKDAGGQQIGFLLGSCGIALALTSEICLKGLPKTQNGEIVQFKGWPRLKWVVTDSKYLSKPPKDWQPHISPAGTEPAYIEYKTSKEGSVMGVTVSRLAMLSQCQALSQACNYSEGETVVNVLDFKKDAGLWHGMFANVMNKMHTISVPYSVMKTCPLSWVQRVHAHKAKVALVKCRDLHWAMMAHRDQRDVSLSSLRMLIVTDGANPWSVSSCDAFLSLFQSHGLKPEAICPCATSAEAMTVAIRRPGVPGAPLPGRAILSMNGLSYGVIRVNTEDKNSALTVQDVGHVMPGGMMCIVKPDGLPQLCRTDEIGEICVSSRTGGMMYFGLAGVTKNTFEVIPVTSSGSPVGDVPFIRSGLLGFVGPGSLVFVVGKMDGLLMVSGRRHNADDIVATGLAVESIKTVYRGRIAVFSVSVFYDERIVVVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKTPLGGIHISQTKQLFLEGSLHPCNILMCPHTCVTNLPKPRQKQPGVGPASVMVGNLVAGKRIAQAAGRDLGQIEENDLVRKHQFLAEILQWRAQATPDHVLFMLLNAKGTTVCTASCLQLHKRAERIASVLGDKGHLNAGDNVVLLYPPGIELIAAFYGCLYAGCIPVTVRPPHAQNLTATLPTVRMVVDVSKAACVLTTQTLMRLLKSREAAAAVDVKTWPAIIDTDDLPRKRLPQLYKPPTPEMLAYLDFSVSTTGMLTGVKMSHSAVNALCRAIKLQCELYSSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLIPPMELENNLFLWLATVNQYKIRDTFCSYSVMELCTKGLGNQVEVLKTRGINLSCIRTCVVVAEERPRVSLQQSFSKLFKDIGLSPRAVSTTFGSRVNVAICLQGTSGPDPTTVYVDLKSLRHDRVRLVERGAPQSLLLSESGKILPGVKVVIVNPETKGPVGDSHLGEIWVNSPHTASGYYTIYDSETLQADHFNTRLSFGDAAQTLWARTGYLGFVRRTELTAATGERHDALYVVGALDETLELRGLRYHPIDIETSVSRVHRSIAECAVFTWTNLLVVVVELCGSEQEALDLVPLVTNVVLEEHYLIVGVVVVVDPGVVPINSRGEKQRMHLRDSFLADQLDPIYVAYNM");
                        ISequence seqR = new Sequence(Alphabets.Protein, "MSLKSFFNFNKKTKLHDIEEDVISEIGSAGSALRTDAHMLKANDVYYKSETDSHTVLRFMKPSENEKIHPVRHSKYEDKSKLPFETIPDPVLKYVKRARDAELQPQLAKVSQKLFADISTATAAEKLQFTVPRRARFEINDPRNPTFSMMALQDIISVLEYRRNKNPTSTAHICIDKKGKEAVSYSWDKILNRAKQFASVAQNHVGLKPGTRVILYYRKSEASEYIISIFGCLLLGIVVIPLSPSSSSESLKLVVNEEKVRVAFTTEATYRIFIKDTEVNNAKSLAWWKSNDFTNYKFEQIKQYRMRANDTVLIDYTFSSSTYNDIKAVYTTKTFLSQMRNLTSSMITNPARQAGWKLHNFEDSKDVLITNFHPSMPLGLIMGVFNSVFAGYCTIFCDEEVLKTPGLLAYLITKYRCTYSLFDYAGLKQTVYNYQEDPKSTLSFKKNYTPNLSSLKLCMVECEVVDPEFNIIVSDRWLQPLGTNNSKEVITPILCLRKFGGIPISFKDWMISYTNRQKHERQMADTCYQEILVLKSSIEKEKVEIVPFLDIRKYSPNEVLCMSPFWYPIPEASVAVVNEDSKNICKVGEVGEIWVYSDCLPKLKAASVINNPQGEQLTDYENNQENKFEKNNSFMDSGLKGFLHNEKIFVLGNKDEQIRQYRKTMVADKLMEEKYVHYSHYLIKKIMKYVPEIFDGVAFEIEIDKAVYSVLVLESPIIKRSLIRNNRLKGRDLFSELVKITESSFQVTQDIFKLDVLSILIAPYKSLPRSRYMGIQAINTNKCKLAFLSGNLPVSYVRFFMDSALPKSKINLNNSKGIWSKDASKHHREIISLNVKQKMDPYKHQNKVSKARENLLNHFTILDFLKTKSAKTPTSPAILTFNAIEKTKVELTWAHFELKVASHVEYMQLSVKAKARSHILLLYYDPLEFLISIHSCFHLGVIPIPFQIREISQLIGEIEEFTKIAKAFNVEAILVDHKVLISLKSRDISNHFQQTCIDLNMKAPKIFETTGIPISKRAKKALNLITPGELNNKGKVALISINKLEDGSIIPTQFSHSSLLAFCHEQKEFVIGNEEKPIIGGIEFSSGMGLLHTALLGVYAGVPTLLIKQENLCNNGSLLFEAIEQNSLSKVMIPLNICQKSFSTAQGCNSIVINSTLSSIIVPCYDRPISSRVNSIIEDIARIGLAPNKVKLAYSHPINPFVCWNADSSMEKMKDYFDANQLRSGLVNVREDVLRNRQPLLYGSGTSTLYNEICIVHPEEKYICQEGEIGEIWINGKHGSYCENNELNSGCELLVQETLDKKSYSRTGQLGFIHHLKKKDQNMEKVPVLYTLDFIWNTLELNGLNHSVKDIEETIELVHPNICTDGCILFQASGSVVILLEVHSQQKFASLIPIIVATALAAHEIILDCVAFVPKGTFLRRPTGEKRRADILKQWTGGDLKHMTSYLIRQDFLLNEDFVGTELIGTTDSYDYSDENLIINSSQLNLL");
                        ISequence seqS = new Sequence(Alphabets.Protein, "MAATHLHIPPNPKTQTSHQNPPFWFSSKTGIYTSKFPSLHLPVDPNLDAVSALFSHKHHGDTALIDSLTGFSISHTELQIMVQSMAAGIYHVLGVRQGDVVSLVLPNSVYFPMIFLSLISLGAIVTTMNPSSSLGEIKKQVSECSVGLAFTSTENVEKLSSLGVSVISVSESYDFDSIRIENPKFYSIMKESFGFVPKPLIKQDDVAAIMYSSGTTGASKGVLLTHRNLIASMELFVRFEASQYEYPGSSNVYLAALPLCHIYGLSLFVMGLLSLGSTIVVMKRFDASDVVNVIERFKITHFPVVPPMLMALTKKAKGVCGEVFKSLKQVSSGAAPLSRKFIEDFLQTLPHVDLIQGYGMTESTAVGTRGFNSEKLSRYSSVGLLAPNMQAKVVDWSSGSFLPPGNRGELWIQGPGVMKGYLNNPKATQMSIVEDSWLRTGDIAYFDEDGYLFIVDRIKEIIKYKGFQIAPADLEAVLVSHPLIIDAAVTAAPNEECGEIPVAFVVRRQETTLSEEDVISYVASQVAPYRKVRKVVMVNSIPKSPTGKILRKELKRILTNSVSSRL");
                        ISequence seqT = new Sequence(Alphabets.Protein, "MDAFELPDTLAQALQRRALHTPDRLALRFLTDEKDQGLVLTYRDLDLRARTIAAALQRQAVPGDRATLLFHSGPDYVAAFFGCLYAGVIAVPAYPPESNRRHHQERLLSIIADAEPRLVLTGSDLQPALLQMDELAAADAPQLLCVDTLDSASADNWQGPQLQADDIAFLQYTSGSTALPKGVQVSHGNLVANELLIRHGFGIDVNPDDVIVSWLPLYHDMGLIGGLLQPIFSGVPCILMAPAYFLTRPLRWLEAISEYGGTISGGPDFAYQLCSARVSDSALERLDLSRWRVAYSGSEPIREDSLNAFAEKFASCGFTPDSFMASYGLAEATLYVAGGKRGKGIPSLRLNAQALARNVAELGDGQPVMSCGTGQPGHGVLIADPATLQVLDENRIGEVWASGPSIAHGYWRNPEATAKAFVQHDGQTWLRTGDLGFQRHGELYITGRLKDMLIVRGHNLYPQDIEKVVEREVDVVRKGRIAAFAVNQDGSEGIGIAAEVSRSVQKILSAEALIKIIRQAVAEAFQEAPSVVVLLNPGALPKTSSGKLQRSACRTRLADGSLDSYAVFPANNTTHQNRTLSTGSDLQAQIASVWCEHLQCEQISADDHFFLLGGNSIVATQVVARLRETLGIDLNLRLLFEAPTLAAFAAQIEALQIAASQGDSQTQNAIVRLPGNEHLPQSLAQNRLWFLWQLDPQSSAYNIPGGLYLRGELDTTALRTSFQRLIERHESLRTRFYEHDGVALQRIDAPGEFHFDTLDISDLPSDERQTRALAIREEQARLPFDLQNGPLLRVTLLRLDEEEHQLLVTLHHIIADGWSLNVLIDEFSRLYASAVQGQPLELAPLPLRYADYGQWQREWLANGEAERQLDYWKQQLGDEQPTLELSTDRPRSAHQQHSASRYSLRLSAELSAAVRNTAQAWQSTSFMLLLAGFQALLHRYSGQTDIRIGVPGANRPRHETQGLIGFFINTLVLRAQLDPRLPFSTLLAQTRQAALDAQAHQDVPFEQLVEAFPQAREHGLFQVMFNHQQRDLGALRRLPGLLAEELPWHSREAKFDLQLHSEEDRNGRLNLSFDYADELFERDTIVRLARHYVQLLTQVSQQAQVALGDVQLLGADELSEQAQWSAAACTPAHVWLPEMLERQALQTPERIALVWEGGSLDFASLHAQANRLAHYLRDKGVGPDVKVAIAAERSPQLLIGLLAILKAGGAYVPLDPDYPIERLAYMLQDSGVELLLTQSHLLGDLPSADGVCTVAMDMLHLDSWPVSAPGLHLSGDNLAYVIYTSGSTGQPKGVGNTHAALVERLQWMQDTYGLDESDVLMQKAPISFDVSVWECFWPLITGCRLLLAGPGEHRDPHRIAQLVNEHGVTTLHFVPPLLQLFVDEPLAQQCTSLRRLFSGGEALPSELRNRVLEHLPGVQLHNRYGPTETAINVTHWQCQVSDGLRSPIGRPLGNVLCRVLDSELNPLPRGVAGELCIGGIGLARGYLNRPGLTAERFVADPLGQPGERLYRTGDLVRWAADGALEYLGRLDQQVKLRGFRVEPQEIEARLLTQPGVGHAAVLVRETAAGPQLIGYYTAEAGQDAQAERIKSALALELPDYMVPAQLVRLDSMPLSPIGKLDRRALPEPQWQTREHVEPQTDLQKQIAAVWRQVLGVPRVGLRDDFFELGGHSLLATQIISRVRQACDIDLPLRALFEASELGAFVEQVQTIQLSGERSSLQPIARVDRSQPVPLSYSQQRMWFLWQMEPDSPAYNVGGMARLNGVLDIERFEAALQALILRHETLRTTFPSVNGVACQKVSEQTGLRVQWQDYSALPAELRQQRLQALADSEAHQPFDLETGPLLRACLVKAADLEHYFVLTLHHIVTEGWAMDIFARELGLLYEAFLQGKPSPLEPLAVQYLDYSVWQRQWMEAGERQRQLDYWTAQLGNEHPLLELPADRPRPAVQSHQGELYRFDLNPELAAKVRAFNARNGLTLFMTMTATLAVLLYRYSGQNDLRIGAPVANRIRPESEGLIGAFLNTQVLRVQLDGQMSVAQLFEQVRHTVIEGQSHQDLPFDHLVEALQPPRSAAYNPLFQVMCNVQRWEFQQSRELAGMTVDYLVNDARATKFDLNLEVTELDHRLGCCLTYSTDLFDEPRIAQMAEHWLNLLQALLADPQQRLSELPLLQDAERQQLLDSLGVEAGEQRLDQCIHSLFAEQARLRADAPALTFAGETLSYAELDGRANQLAGMLRQRGVGPQVRVGLALPRSLDMVVGLLAILKAGGAYVPLDPEYPLERLHYMIEDSGVGLLLSDRALFAALGELPAGVARWCLEDDQPLLASFSTDELPFISLPQHQAYLIYTSGSTGKPKGVVVSHGEIAMHCQAVIRRFDMQPDDCELHFYSINFDAATERLLVPLLSGARVVLRAQGQWDAEEICTLIRQQQVNILGFTPSYGSQLAQWLATQGQTLPVRMCITGGEALTGEHLQRIRAVFQPELLFNAYGPTETVVMPLASLAPQQLEEGEASVPIGRVVGARVAYILDADLALVPQGASGELYIGGAGLAQGYHQRPGMSAERFVADPFASNGGRLYRTGDLVRQRADGLVEYLGRIDHQVKIRGFRIELGEIETRLLEHEAIREAVVLALDTPSGKQLAGYLVSDVAGQGDEQQAQLRESLKSHLKAQLPDYMVPTHLILLDSMPLTANGKLDRRALPAPDPELNRQHYVAPASELEQQLAAIWCAVLNVEKVGLNDNFFELGGDSILSIQVVSRARQVGIHFSPRDLFQHQTVQTLAAVATASELIQAEQGLLQGASALTPIQHWFFDTPIPERQHWNQSLVLEPLTALDPRLLEQALRALLEQHDALRLSFTGQNGKWQAEHRAVTAETLLIQAQVADMAECAALYADTQRSLDLQNGPLLRALLVDGPQGQQRLLMVIHHLVVDGVSWRVLLDDLQTAYRQLSEATPVRFAAKTSAFRDWAARLQAYAGNESLREELHVWQRQLGGPLAQLPCHNPQGGQQNRHAQTVSVRLDAERTRQLLQQAPSAYRTQVNDLLLTALAQVVCRWSGQPSTLVQLEGHGRETLFDDIDLTRTVGWFTSAYPLRLTPAVAGDAAPGESIKAIKEQLRQVPHKGLGYGVLRYLADSASKAAMQALPVAPITFNYLGQFDQSFASDALFRPLEESAGAAHDPHAPLPNELSIDSQVYGGELLLRWTFSAERYQPAAIEALAQDYLARLQALIAHCLSDGSGGLTPSDFPLADLDQAQLDALPVAATHIEDVYPLTPMQEGMLLHTLLEPGTGLYYMQDRYRINSALDPERFAQAWQAVIARHEALRASFCWDIGETMLQVIHKPGSTPIDYLDWRDVPEDQQEPRLQALLKSEREAGFNLLDQPPFHLRLIRVDEARYWFMMSNHHILIDAWCRSLLMNDFFDIYTALGEGREAQLTPAPRYRDYIGWLQRRGLAQARDWWQDNLRGFERPTPIPSDRPFLREHAGDSGGMVVGDCYTRLDEGDGAQLRELAQQHQLTVNTFAQAAWALTLRRLSGDRDVVFGVTVAGRPVELPQMQRTVGLFINTIALRVGMPGDDQRCSVRQWLSQLLDSNMQLREYEYLPLVTIQENSELPKGQPLFDSLFVFENAPLEVSVLDRAQSLNATSDSGRTHTNYPLTAVCYPGDDLGLHLSYDQRYFDESTVQNMLGEFKRLLLALIEGFHGDMSELALVSEQERTFLIEDCNQSEHAYPLDKSYVELFEAQVEAHPQRIAVSCLDRQLSYAELNIASNRLGHALIEAGVSFDQPVALLAERGVELPGMIIGSFKAGGGYLPLDPALPDSRLSGIIGQSGTPLLVCSAQCLEQGRALLEALTESARPQLLVWETVQQRESAQHNPGRYSAPDNLAYVIFTSGSTGLPKGVMVEQRGMLNNQLSKVPYLSLSERDVIAQTASQSFDISVWQFLAAPLFGARVDIVPNDIARDPQALLAHVQAQRISVLESVPSLITGLLAEQQATLDSLRWMLPTGEAMPPELASQWLQRYPQIGLVNAYGPAECSDDVAFFRVDAASTRSAYLPIGSPTDNNRLYLLDEALDLVPLGAVGELCVAGAGVGRGYVADPSRSVPVFVPHPFGAPGERLYRTGDLARRRKDGVLEYVGRVDHQVKIRGYRIELGEIETRLLEHSAIRETVVLAVDGPLGKVLAAYLVPSAATQDPDALRDELKNHLKASLPDYMVPAHLVILEAMPLTPNGKLDRKALPAPDVSQAQQEYLAPQTEMEQQLATIWADVLKVERVGITDNFFELGGHSLLATQVVTRAQKLLQRNVPLRAMFEFNTVQALAEHLQSLGGAQVDEQKFDRLADLMAELEGL");
                        ISequence seqU = new Sequence(Alphabets.Protein, "MADRGCPLEAAPLPAEVRESLAELELELSEGDITQKGYEKKRAKLLARYIPLIQGIDPSLQAENRIPGPSQTTAAAPKQQKSRPTASRDERFRSDVHTEAVQAALAKYKERKMPMPSKRRSVLVHSSVETYTPPDTSSASEDEGSLRRPGRLTSTPLQSHSSVEPWLDRVIQGSSTSSSASSTSSHPGGRPTTAPSAAATPGAAATTALAGLEAHTHIDLHSAPPDVTTGLVEHSYFERPQVASVRSVPRGCSGSMLETADGVPVNSRVSSKIQQLLNTLKRPKRPPLKEFFVDDFEELLEVQQPDPNQPKPEGSETSVLRGEPLTAGVPRPPSLLATLQRWGTTQPKSPCLTALDTTGKAVYTLTYGKLWSRSLKLAYTLLNKLTSKNEPLLKPGDRVALVFPNSDPVMFMVAFYGCLLAELVPVPIEVPLTRKDAGSQQVGFLLGSCGVFLALTTDACQKGLPKAQTGEVAAFKGWPPLSWLVIDGKHLAKPPKDWHPLAQDTGTGTAYIEYKTSKEGSTVGVTVSHASLLAQCRALTQACGYSEAETLTNVLDFKRDAGLWHGVLTSVMNRMHVVSVPYALMKANPLSWIQKVCFYKARAALVKSRDMHWSLLAQRGQRDVSLSSLRMLIVADGANPWSISSCDAFLNVFQSRGLRPEVICPCASSPEALTVAIRRPPDLGGPPPRKAVLSMNGLSYGVIRVDTEEKLSVLTVQDVGQVMPGANVCVVKLEGTPYLCKTDEVGEICVSSSATGTAYYGLLGITKNVFEAVPVTTGGAPIFDRPFTRTGLLGFIGPDNLVFIVGKLDGLMVTGVRRHNADDVVATALAVEPMKFVYRGRIAVFSVTVLHDDRIVLVAEQRPDASEEDSFQWMSRVLQAIDSIHQVGVYCLALVPANTLPKAPLGGIHISETKQRFLEGTLHPCNVLMCPHTCVTNLPKPRQKQPEVGPASMIVGNLVAGKRIAQASGRELAHLEDSDQARKFLFLADVLQWRAHTTPDHPLFLLLNAKGTVTSTATCVQLHKRAERVAAALMEKGRLSVGDHVALVYPPGVDLIAAFYGCLYCGCVPVTVRPPHPQNLGTTLPTVKMIVEVSKSACVLTTQAVTRLLRSKEAAAAVDIRTWPTILDTDDIPKKKIASVFRPPSPDVLAYLDFSVSTTGILAGVKMSHAATSALCRSIKLQCELYPSRQIAICLDPYCGLGFALWCLCSVYSGHQSVLVPPLELESNVSLWLSAVSQYKARVTFCSYSVMEMCTKGLGAQTGVLRMKGVNLSCVRTCMVVAEERPRIALTQSFSKLFKDLGLPARAVSTTFGCRVNVAICLQGTAGPDPTTVYVDMRALRHDRVRLVERGSPHSLPLMESGKILPGVKVIIAHTETKGPLGDSHLGEIWVSSPHNATGYYTVYGEEALHADHFSARLSFGDTQTIWARTGYLGFLRRTELTDASGGRHDALYVVGSLDETLELRGMRYHPIDIETSVIRAHRSIAECAVFTWTNLLVVVVELDGLEQDALDLVALVTNVVLEEHYLVVGVVVIVDPGVIPINSRGEKQRMHLRDGFLADQLDPIYVAYNM");
                        List<ISequence> sequences = new List<ISequence>();
                        sequences.Add(seqA);
                        sequences.Add(seqB);
                        sequences.Add(seqC);
                        sequences.Add(seqD);
                        sequences.Add(seqE);
                        sequences.Add(seqF);
                        sequences.Add(seqG);
                        sequences.Add(seqH);
                        sequences.Add(seqI);
                        sequences.Add(seqK);
                        sequences.Add(seqL);
                        sequences.Add(seqM);
                        sequences.Add(seqN);
                        sequences.Add(seqO);
                        sequences.Add(seqP);
                        sequences.Add(seqQ);
                        sequences.Add(seqR);
                        sequences.Add(seqS);
                        sequences.Add(seqT);
                        sequences.Add(seqU);


                        DistanceFunctionTypes distanceFunctionName = DistanceFunctionTypes.EuclideanDistance;
                        UpdateDistanceMethodsTypes hierarchicalClusteringMethodName = UpdateDistanceMethodsTypes.Average;
                        ProfileAlignerNames profileAlignerName = ProfileAlignerNames.NeedlemanWunschProfileAligner;
                        ProfileScoreFunctionNames profileProfileFunctionName = ProfileScoreFunctionNames.WeightedInnerProduct;

                        PAMSAMMultipleSequenceAligner msa = new PAMSAMMultipleSequenceAligner
                            (sequences, kmerLength, distanceFunctionName, hierarchicalClusteringMethodName,
                            profileAlignerName, profileProfileFunctionName, similarityMatrix, gapOpenPenalty, gapExtendPenalty,
                            Environment.ProcessorCount * 2, Environment.ProcessorCount);
                        SimpleConsensusResolver consensusResolver = new SimpleConsensusResolver(Alphabets.AmbiguousAlphabetMap[Alphabets.Protein]);

                        Console.WriteLine("Aligned sequences in stage 1: {0}", msa.AlignmentScoreA);
                        for (int i = 0; i < msa.AlignedSequencesA.Count; ++i)
                        {
                            Console.WriteLine("\n\n");
                            Console.WriteLine(new string(msa.AlignedSequencesA[i].Select(a => (char)a).ToArray()));
                        }

                        Console.WriteLine("Aligned sequences in stage 3: {0}", msa.AlignmentScoreC);
                        for (int i = 0; i < msa.AlignedSequencesC.Count; ++i)
                        {
                            Console.WriteLine("\n\n");
                            Console.WriteLine(new string(msa.AlignedSequencesC[i].Select(a => (char)a).ToArray()));
                        }
                        Console.WriteLine("Aligned sequences final: {0}", msa.AlignmentScore);

                        List<string> alignedSequences = new List<string>();
                        for (int i = 0; i < msa.AlignedSequences.Count; ++i)
                        {
                            Console.WriteLine("\n\n");
                            Console.WriteLine(new string(msa.AlignedSequences[i].Select(a => (char)a).ToArray()));
                            alignedSequences.Add(new string(msa.AlignedSequences[i].Select(a => (char)a).ToArray()));
                        }

                        string consensus = "";
                        int verticalCounter = 0;
                        int horizontalCounter = 0;
                        while(horizontalCounter < alignedSequences.ElementAt(0).Length)
                        {
                            List<byte> data = new List<byte>();
                            while(verticalCounter < alignedSequences.Count)
                            {
                                data.Add((byte)alignedSequences.ElementAt(verticalCounter).ElementAt(horizontalCounter));
                                verticalCounter++;
                            }
                            verticalCounter = 0;
                            horizontalCounter++;
                            consensus += (char)msa.ConsensusResolver.GetConsensus(data.ToArray());
                        }
                        consensus = consensus.Replace('X', '-');
                        Console.WriteLine($"\n\n\nConsensusSequence: {consensus}");
                        

                        break;
                        
                    }

                case "X":
                    System.Environment.Exit(1);
                    break;

                default:
                    Console.Write("\nInvalid Input. Press Any Key To Continue...");
                    Console.ReadLine();
                    Console.WriteLine();
                    Show();
                    break;
            }

            // Show the menu again
            Show();
        }
    }
}
